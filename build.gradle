plugins {
	id 'org.springframework.boot' version '2.3.3.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id "com.github.breadmoirai.github-release" version "2.2.12"
}

group = 'net.hyperboard'
version = '0.0.2-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "Hoxton.SR7")
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	//implementation 'org.springframework.cloud:spring-cloud-cloudfoundry-discovery'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
}


githubRelease {
    //token "<your token>" // This is your personal access token with Repo permissions
                         // You get this from your user settings > developer settings > Personal Access Tokens
                         
    token = "$System.env.GITHUB_TOKEN"
    
    owner "kkellner" // default is the last part of your group. Eg group: "com.github.breadmoirai" => owner: "breadmoirai"
    //repo "github-release" // by default this is set to your project name
    tagName "v0.0.2" // by default this is set to "v${project.version}"
    targetCommitish "master" // by default this is set to "master"
    releaseName "v0.0.2" // Release title, by default this is the same as the tagName
    //body 'Initial release'
    
    body { """\
# Release $version

Release Notes

## Change Log
${changelog().call().replaceAll('^','- ')}
""" }

//${changelog().call().replace('\n','\n - ')}

    draft false // by default this is false
    prerelease false // by default this is false
    
    releaseAssets.from('build/libs')
    FilenameFilter filter = { dir, filename -> filename.contains(project.version) }
    releaseAssets = jar.destinationDir.listFiles filter 
    //releaseAssets jar.destinationDir.listFiles // this points to which files you want to upload as assets with your release

    overwrite false // by default false; if set to true, will delete an existing release with the same tag and name
    dryRun true // by default false; you can use this to see what actions would be taken without making a release
    apiEndpoint "https://api.github.com" // should only change for github enterprise users
    client // This is the okhttp client used for http requests
}